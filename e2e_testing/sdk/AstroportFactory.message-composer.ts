/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { PairType, InstantiateMsg, PairConfig, ExecuteMsg, AssetInfo, Addr, Binary, QueryMsg, ArrayOfPairType, ConfigResponse, FeeInfoResponse, PairInfo, ArrayOfPairInfo } from "./AstroportFactory.types";
export interface AstroportFactoryMsg {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    coinRegistryAddress,
    feeAddress,
    incentivesAddress,
    tokenCodeId
  }: {
    coinRegistryAddress?: string;
    feeAddress?: string;
    incentivesAddress?: string;
    tokenCodeId?: number;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  updatePairConfig: ({
    config
  }: {
    config: PairConfig;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  createPair: ({
    assetInfos,
    initParams,
    pairType
  }: {
    assetInfos: AssetInfo[];
    initParams?: Binary;
    pairType: PairType;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  proposeNewOwner: ({
    expiresIn,
    owner
  }: {
    expiresIn: number;
    owner: string;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  dropOwnershipProposal: (funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  claimOwnership: (funds_?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class AstroportFactoryMsgComposer implements AstroportFactoryMsg {
  sender: string;
  contractAddress: string;
  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.updatePairConfig = this.updatePairConfig.bind(this);
    this.createPair = this.createPair.bind(this);
    this.proposeNewOwner = this.proposeNewOwner.bind(this);
    this.dropOwnershipProposal = this.dropOwnershipProposal.bind(this);
    this.claimOwnership = this.claimOwnership.bind(this);
  }
  updateConfig = ({
    coinRegistryAddress,
    feeAddress,
    incentivesAddress,
    tokenCodeId
  }: {
    coinRegistryAddress?: string;
    feeAddress?: string;
    incentivesAddress?: string;
    tokenCodeId?: number;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            coin_registry_address: coinRegistryAddress,
            fee_address: feeAddress,
            incentives_address: incentivesAddress,
            token_code_id: tokenCodeId
          }
        })),
        funds: funds_
      })
    };
  };
  updatePairConfig = ({
    config
  }: {
    config: PairConfig;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_pair_config: {
            config
          }
        })),
        funds: funds_
      })
    };
  };
  createPair = ({
    assetInfos,
    initParams,
    pairType
  }: {
    assetInfos: AssetInfo[];
    initParams?: Binary;
    pairType: PairType;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_pair: {
            asset_infos: assetInfos,
            init_params: initParams,
            pair_type: pairType
          }
        })),
        funds: funds_
      })
    };
  };
  proposeNewOwner = ({
    expiresIn,
    owner
  }: {
    expiresIn: number;
    owner: string;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          propose_new_owner: {
            expires_in: expiresIn,
            owner
          }
        })),
        funds: funds_
      })
    };
  };
  dropOwnershipProposal = (funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          drop_ownership_proposal: {}
        })),
        funds: funds_
      })
    };
  };
  claimOwnership = (funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          claim_ownership: {}
        })),
        funds: funds_
      })
    };
  };
}