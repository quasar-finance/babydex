/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type AssetInfo = {
  token: {
    contract_addr: Addr;
  };
} | {
  native_token: {
    denom: string;
  };
};
export type Addr = string;
export type Uint128 = string;
export interface InstantiateMsg {
  astro_token: AssetInfo;
  factory: string;
  guardian?: string | null;
  incentivization_fee_info?: IncentivizationFeeInfo | null;
  owner: string;
  vesting_contract: string;
}
export interface IncentivizationFeeInfo {
  fee: Coin;
  fee_receiver: Addr;
}
export interface Coin {
  amount: Uint128;
  denom: string;
}
export type ExecuteMsg = {
  setup_pools: {
    pools: [string, Uint128][];
  };
} | {
  claim_rewards: {
    lp_tokens: string[];
  };
} | {
  receive: Cw20ReceiveMsg;
} | {
  deposit: {
    recipient?: string | null;
  };
} | {
  withdraw: {
    amount: Uint128;
    lp_token: string;
  };
} | {
  set_tokens_per_second: {
    amount: Uint128;
  };
} | {
  incentivize: {
    lp_token: string;
    schedule: InputSchedule;
  };
} | {
  incentivize_many: [string, InputSchedule][];
} | {
  remove_reward_from_pool: {
    bypass_upcoming_schedules?: boolean;
    lp_token: string;
    receiver: string;
    reward: string;
  };
} | {
  claim_orphaned_rewards: {
    limit?: number | null;
    receiver: string;
  };
} | {
  update_config: {
    astro_token?: AssetInfo | null;
    generator_controller?: string | null;
    guardian?: string | null;
    incentivization_fee_info?: IncentivizationFeeInfo | null;
    token_transfer_gas_limit?: number | null;
    vesting_contract?: string | null;
  };
} | {
  update_blocked_tokenslist: {
    add?: AssetInfo[];
    remove?: AssetInfo[];
  };
} | {
  deactivate_pool: {
    lp_token: string;
  };
} | {
  deactivate_blocked_pools: {};
} | {
  propose_new_owner: {
    expires_in: number;
    owner: string;
  };
} | {
  drop_ownership_proposal: {};
} | {
  claim_ownership: {};
};
export type Binary = string;
export interface Cw20ReceiveMsg {
  amount: Uint128;
  msg: Binary;
  sender: string;
}
export interface InputSchedule {
  duration_periods: number;
  reward: Asset;
}
export interface Asset {
  amount: Uint128;
  info: AssetInfo;
}
export type QueryMsg = {
  config: {};
} | {
  query_deposit: {
    lp_token: string;
    user: string;
  };
} | {
  pending_rewards: {
    lp_token: string;
    user: string;
  };
} | {
  reward_info: {
    lp_token: string;
  };
} | {
  pool_info: {
    lp_token: string;
  };
} | {
  pool_stakers: {
    limit?: number | null;
    lp_token: string;
    start_after?: string | null;
  };
} | {
  blocked_tokens_list: {
    limit?: number | null;
    start_after?: AssetInfo | null;
  };
} | {
  is_fee_expected: {
    lp_token: string;
    reward: string;
  };
} | {
  external_reward_schedules: {
    limit?: number | null;
    lp_token: string;
    reward: string;
    start_after?: number | null;
  };
} | {
  list_pools: {
    limit?: number | null;
    start_after?: string | null;
  };
} | {
  active_pools: {};
};
export type ArrayOfTupleOfStringAndUint128 = [string, Uint128][];
export type ArrayOfAssetInfo = AssetInfo[];
export interface Config {
  astro_per_second: Uint128;
  astro_token: AssetInfo;
  factory: Addr;
  generator_controller?: Addr | null;
  guardian?: Addr | null;
  incentivization_fee_info?: IncentivizationFeeInfo | null;
  owner: Addr;
  token_transfer_gas_limit?: number | null;
  total_alloc_points: Uint128;
  vesting_contract: Addr;
}
export type Decimal256 = string;
export type ArrayOfScheduleResponse = ScheduleResponse[];
export interface ScheduleResponse {
  end_ts: number;
  rps: Decimal256;
  start_ts: number;
}
export type Boolean = boolean;
export type ArrayOfString = string[];
export type ArrayOfAsset = Asset[];
export type RewardType = {
  int: AssetInfo;
} | {
  ext: {
    info: AssetInfo;
    next_update_ts: number;
  };
};
export interface PoolInfoResponse {
  last_update_ts: number;
  rewards: RewardInfo[];
  total_lp: Uint128;
}
export interface RewardInfo {
  index: Decimal256;
  orphaned: Decimal256;
  reward: RewardType;
  rps: Decimal256;
}
export type ArrayOfRewardInfo = RewardInfo[];