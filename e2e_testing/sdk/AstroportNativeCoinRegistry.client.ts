/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, QueryMsg, Addr, Config, CoinResponse, ArrayOfCoinResponse } from "./AstroportNativeCoinRegistry.types";
export interface AstroportNativeCoinRegistryReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
  nativeToken: ({
    denom
  }: {
    denom: string;
  }) => Promise<CoinResponse>;
  nativeTokens: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<ArrayOfCoinResponse>;
}
export class AstroportNativeCoinRegistryQueryClient implements AstroportNativeCoinRegistryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.nativeToken = this.nativeToken.bind(this);
    this.nativeTokens = this.nativeTokens.bind(this);
  }
  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  nativeToken = async ({
    denom
  }: {
    denom: string;
  }): Promise<CoinResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      native_token: {
        denom
      }
    });
  };
  nativeTokens = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<ArrayOfCoinResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      native_tokens: {
        limit,
        start_after: startAfter
      }
    });
  };
}
export interface AstroportNativeCoinRegistryInterface extends AstroportNativeCoinRegistryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  add: ({
    nativeCoins
  }: {
    nativeCoins: string[][];
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  register: ({
    nativeCoins
  }: {
    nativeCoins: string[][];
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  remove: ({
    nativeCoins
  }: {
    nativeCoins: string[];
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  proposeNewOwner: ({
    expiresIn,
    owner
  }: {
    expiresIn: number;
    owner: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  dropOwnershipProposal: (fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  claimOwnership: (fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class AstroportNativeCoinRegistryClient extends AstroportNativeCoinRegistryQueryClient implements AstroportNativeCoinRegistryInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.add = this.add.bind(this);
    this.register = this.register.bind(this);
    this.remove = this.remove.bind(this);
    this.proposeNewOwner = this.proposeNewOwner.bind(this);
    this.dropOwnershipProposal = this.dropOwnershipProposal.bind(this);
    this.claimOwnership = this.claimOwnership.bind(this);
  }
  add = async ({
    nativeCoins
  }: {
    nativeCoins: string[][];
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add: {
        native_coins: nativeCoins
      }
    }, fee_, memo_, funds_);
  };
  register = async ({
    nativeCoins
  }: {
    nativeCoins: string[][];
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      register: {
        native_coins: nativeCoins
      }
    }, fee_, memo_, funds_);
  };
  remove = async ({
    nativeCoins
  }: {
    nativeCoins: string[];
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove: {
        native_coins: nativeCoins
      }
    }, fee_, memo_, funds_);
  };
  proposeNewOwner = async ({
    expiresIn,
    owner
  }: {
    expiresIn: number;
    owner: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      propose_new_owner: {
        expires_in: expiresIn,
        owner
      }
    }, fee_, memo_, funds_);
  };
  dropOwnershipProposal = async (fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      drop_ownership_proposal: {}
    }, fee_, memo_, funds_);
  };
  claimOwnership = async (fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_ownership: {}
    }, fee_, memo_, funds_);
  };
}