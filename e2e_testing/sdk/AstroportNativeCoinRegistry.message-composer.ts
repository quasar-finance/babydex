/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, QueryMsg, Addr, Config, CoinResponse, ArrayOfCoinResponse } from "./AstroportNativeCoinRegistry.types";
export interface AstroportNativeCoinRegistryMsg {
  contractAddress: string;
  sender: string;
  add: ({
    nativeCoins
  }: {
    nativeCoins: string[][];
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  register: ({
    nativeCoins
  }: {
    nativeCoins: string[][];
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  remove: ({
    nativeCoins
  }: {
    nativeCoins: string[];
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  proposeNewOwner: ({
    expiresIn,
    owner
  }: {
    expiresIn: number;
    owner: string;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  dropOwnershipProposal: (funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  claimOwnership: (funds_?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class AstroportNativeCoinRegistryMsgComposer implements AstroportNativeCoinRegistryMsg {
  sender: string;
  contractAddress: string;
  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.add = this.add.bind(this);
    this.register = this.register.bind(this);
    this.remove = this.remove.bind(this);
    this.proposeNewOwner = this.proposeNewOwner.bind(this);
    this.dropOwnershipProposal = this.dropOwnershipProposal.bind(this);
    this.claimOwnership = this.claimOwnership.bind(this);
  }
  add = ({
    nativeCoins
  }: {
    nativeCoins: string[][];
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add: {
            native_coins: nativeCoins
          }
        })),
        funds: funds_
      })
    };
  };
  register = ({
    nativeCoins
  }: {
    nativeCoins: string[][];
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          register: {
            native_coins: nativeCoins
          }
        })),
        funds: funds_
      })
    };
  };
  remove = ({
    nativeCoins
  }: {
    nativeCoins: string[];
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove: {
            native_coins: nativeCoins
          }
        })),
        funds: funds_
      })
    };
  };
  proposeNewOwner = ({
    expiresIn,
    owner
  }: {
    expiresIn: number;
    owner: string;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          propose_new_owner: {
            expires_in: expiresIn,
            owner
          }
        })),
        funds: funds_
      })
    };
  };
  dropOwnershipProposal = (funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          drop_ownership_proposal: {}
        })),
        funds: funds_
      })
    };
  };
  claimOwnership = (funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          claim_ownership: {}
        })),
        funds: funds_
      })
    };
  };
}