/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, Binary, Decimal, AssetInfo, Addr, Cw20ReceiveMsg, SwapOperation, QueryMsg, SimulateSwapOperationsResponse } from "./AstroportRouter.types";
export interface AstroportRouterReadOnlyInterface {
  contractAddress: string;
  simulateSwapOperations: ({
    offerAmount,
    operations
  }: {
    offerAmount: Uint128;
    operations: SwapOperation[];
  }) => Promise<SimulateSwapOperationsResponse>;
}
export class AstroportRouterQueryClient implements AstroportRouterReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.simulateSwapOperations = this.simulateSwapOperations.bind(this);
  }
  simulateSwapOperations = async ({
    offerAmount,
    operations
  }: {
    offerAmount: Uint128;
    operations: SwapOperation[];
  }): Promise<SimulateSwapOperationsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      simulate_swap_operations: {
        offer_amount: offerAmount,
        operations
      }
    });
  };
}
export interface AstroportRouterInterface extends AstroportRouterReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  executeSwapOperations: ({
    maxSpread,
    minimumReceive,
    operations,
    to
  }: {
    maxSpread?: Decimal;
    minimumReceive?: Uint128;
    operations: SwapOperation[];
    to?: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  executeSwapOperation: ({
    maxSpread,
    operation,
    single,
    to
  }: {
    maxSpread?: Decimal;
    operation: SwapOperation;
    single: boolean;
    to?: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class AstroportRouterClient extends AstroportRouterQueryClient implements AstroportRouterInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.executeSwapOperations = this.executeSwapOperations.bind(this);
    this.executeSwapOperation = this.executeSwapOperation.bind(this);
  }
  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee_, memo_, funds_);
  };
  executeSwapOperations = async ({
    maxSpread,
    minimumReceive,
    operations,
    to
  }: {
    maxSpread?: Decimal;
    minimumReceive?: Uint128;
    operations: SwapOperation[];
    to?: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      execute_swap_operations: {
        max_spread: maxSpread,
        minimum_receive: minimumReceive,
        operations,
        to
      }
    }, fee_, memo_, funds_);
  };
  executeSwapOperation = async ({
    maxSpread,
    operation,
    single,
    to
  }: {
    maxSpread?: Decimal;
    operation: SwapOperation;
    single: boolean;
    to?: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      execute_swap_operation: {
        max_spread: maxSpread,
        operation,
        single,
        to
      }
    }, fee_, memo_, funds_);
  };
}