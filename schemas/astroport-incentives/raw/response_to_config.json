{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Config",
  "type": "object",
  "required": [
    "astro_per_second",
    "astro_token",
    "factory",
    "owner",
    "total_alloc_points",
    "vesting_contract"
  ],
  "properties": {
    "astro_per_second": {
      "description": "Total amount of ASTRO rewards per second",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "astro_token": {
      "description": "[`AssetInfo`] of the ASTRO token",
      "allOf": [
        {
          "$ref": "#/definitions/AssetInfo"
        }
      ]
    },
    "factory": {
      "description": "The Factory address",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "generator_controller": {
      "description": "Contract address which can only set active generators and their alloc points",
      "anyOf": [
        {
          "$ref": "#/definitions/Addr"
        },
        {
          "type": "null"
        }
      ]
    },
    "guardian": {
      "description": "The guardian address which can add or remove tokens from blacklist",
      "anyOf": [
        {
          "$ref": "#/definitions/Addr"
        },
        {
          "type": "null"
        }
      ]
    },
    "incentivization_fee_info": {
      "description": "Defines native fee along with fee receiver. Fee is paid on adding NEW external reward to a specific pool",
      "anyOf": [
        {
          "$ref": "#/definitions/IncentivizationFeeInfo"
        },
        {
          "type": "null"
        }
      ]
    },
    "owner": {
      "description": "Address allowed to change contract parameters",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "token_transfer_gas_limit": {
      "description": "Max allowed gas limit per one external incentive token transfer. If token transfer hits this gas limit, reward will be considered as claimed while in reality it will be stuck in the contract. If None, there is no gas limit.",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint64",
      "minimum": 0.0
    },
    "total_alloc_points": {
      "description": "Total allocation points. Must be the sum of all allocation points in all active generators",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "vesting_contract": {
      "description": "The vesting contract which distributes internal (ASTRO) rewards",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetInfo": {
      "description": "This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"stake...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
      "oneOf": [
        {
          "description": "Non-native Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "IncentivizationFeeInfo": {
      "type": "object",
      "required": [
        "fee",
        "fee_receiver"
      ],
      "properties": {
        "fee": {
          "description": "To make things easier we avoid CW20 fee tokens",
          "allOf": [
            {
              "$ref": "#/definitions/Coin"
            }
          ]
        },
        "fee_receiver": {
          "description": "Fee receiver can be either a contract or a wallet.",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
