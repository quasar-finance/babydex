{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Array_of_RewardInfo",
  "type": "array",
  "items": {
    "$ref": "#/definitions/RewardInfo"
  },
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetInfo": {
      "description": "This enum describes available Token types. ## Examples ``` # use cosmwasm_std::Addr; # use astroport::asset::AssetInfo::{NativeToken, Token}; Token { contract_addr: Addr::unchecked(\"stake...\") }; NativeToken { denom: String::from(\"uluna\") }; ```",
      "oneOf": [
        {
          "description": "Non-native Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal256": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal256(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 115792089237316195423570985008687907853269984665640564039457.584007913129639935 (which is (2^256 - 1) / 10^18)",
      "type": "string"
    },
    "RewardInfo": {
      "type": "object",
      "required": [
        "index",
        "orphaned",
        "reward",
        "rps"
      ],
      "properties": {
        "index": {
          "description": "Last checkpointed reward per LP token",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal256"
            }
          ]
        },
        "orphaned": {
          "description": "Orphaned rewards might appear between the time when pool gets incentivized and the time when first user stakes",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal256"
            }
          ]
        },
        "reward": {
          "description": "Defines [`AssetInfo`] of reward token as well as its type: protocol or external.",
          "allOf": [
            {
              "$ref": "#/definitions/RewardType"
            }
          ]
        },
        "rps": {
          "description": "Reward tokens per second for the whole pool",
          "allOf": [
            {
              "$ref": "#/definitions/Decimal256"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "RewardType": {
      "description": "This enum is a tiny wrapper over [`AssetInfo`] to differentiate between internal and external rewards. External rewards always have a next_update_ts field which is used to update reward per second (or disable them).",
      "oneOf": [
        {
          "description": "Internal rewards aka ASTRO emissions don't have next_update_ts field and they are paid out from Vesting contract.",
          "type": "object",
          "required": [
            "int"
          ],
          "properties": {
            "int": {
              "$ref": "#/definitions/AssetInfo"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "External rewards always have corresponding schedules. Reward is paid out from Incentives contract balance.",
          "type": "object",
          "required": [
            "ext"
          ],
          "properties": {
            "ext": {
              "type": "object",
              "required": [
                "info",
                "next_update_ts"
              ],
              "properties": {
                "info": {
                  "$ref": "#/definitions/AssetInfo"
                },
                "next_update_ts": {
                  "description": "Time when next schedule should start",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
